{
  "version": 3,
  "sources": ["../../../../../@storybook/web-components/dist/chunk-CEH6MNVV.mjs", "../../../../../lit-html/src/directive-helpers.ts", "../../../../../@storybook/web-components/dist/chunk-J73AUUXV.mjs", "../../../../../@storybook/web-components/dist/chunk-Y527KJ6E.mjs"],
  "sourcesContent": ["var __defProp=Object.defineProperty;var __export=(target,all)=>{for(var name in all)__defProp(target,name,{get:all[name],enumerable:!0});};\n\nexport { __export };\n", "/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {\n  _$LH,\n  Part,\n  DirectiveParent,\n  CompiledTemplateResult,\n  MaybeCompiledTemplateResult,\n  UncompiledTemplateResult,\n} from './lit-html.js';\nimport {\n  DirectiveResult,\n  DirectiveClass,\n  PartInfo,\n  AttributePartInfo,\n} from './directive.js';\ntype Primitive = null | undefined | boolean | number | string | symbol | bigint;\n\nconst {_ChildPart: ChildPart} = _$LH;\n\ntype ChildPart = InstanceType<typeof ChildPart>;\n\nconst ENABLE_SHADYDOM_NOPATCH = true;\n\nconst wrap =\n  ENABLE_SHADYDOM_NOPATCH &&\n  window.ShadyDOM?.inUse &&\n  window.ShadyDOM?.noPatch === true\n    ? window.ShadyDOM!.wrap\n    : (node: Node) => node;\n\n/**\n * Tests if a value is a primitive value.\n *\n * See https://tc39.github.io/ecma262/#sec-typeof-operator\n */\nexport const isPrimitive = (value: unknown): value is Primitive =>\n  value === null || (typeof value != 'object' && typeof value != 'function');\n\nexport const TemplateResultType = {\n  HTML: 1,\n  SVG: 2,\n  MATHML: 3,\n} as const;\n\nexport type TemplateResultType =\n  (typeof TemplateResultType)[keyof typeof TemplateResultType];\n\ntype IsTemplateResult = {\n  (val: unknown): val is MaybeCompiledTemplateResult;\n  <T extends TemplateResultType>(\n    val: unknown,\n    type: T\n  ): val is UncompiledTemplateResult<T>;\n};\n\n/**\n * Tests if a value is a TemplateResult or a CompiledTemplateResult.\n */\nexport const isTemplateResult: IsTemplateResult = (\n  value: unknown,\n  type?: TemplateResultType\n): value is UncompiledTemplateResult =>\n  type === undefined\n    ? // This property needs to remain unminified.\n      (value as UncompiledTemplateResult)?.['_$litType$'] !== undefined\n    : (value as UncompiledTemplateResult)?.['_$litType$'] === type;\n\n/**\n * Tests if a value is a CompiledTemplateResult.\n */\nexport const isCompiledTemplateResult = (\n  value: unknown\n): value is CompiledTemplateResult => {\n  return (value as CompiledTemplateResult)?.['_$litType$']?.h != null;\n};\n\n/**\n * Tests if a value is a DirectiveResult.\n */\nexport const isDirectiveResult = (value: unknown): value is DirectiveResult =>\n  // This property needs to remain unminified.\n  (value as DirectiveResult)?.['_$litDirective$'] !== undefined;\n\n/**\n * Retrieves the Directive class for a DirectiveResult\n */\nexport const getDirectiveClass = (value: unknown): DirectiveClass | undefined =>\n  // This property needs to remain unminified.\n  (value as DirectiveResult)?.['_$litDirective$'];\n\n/**\n * Tests whether a part has only a single-expression with no strings to\n * interpolate between.\n *\n * Only AttributePart and PropertyPart can have multiple expressions.\n * Multi-expression parts have a `strings` property and single-expression\n * parts do not.\n */\nexport const isSingleExpression = (part: PartInfo) =>\n  (part as AttributePartInfo).strings === undefined;\n\nconst createMarker = () => document.createComment('');\n\n/**\n * Inserts a ChildPart into the given container ChildPart's DOM, either at the\n * end of the container ChildPart, or before the optional `refPart`.\n *\n * This does not add the part to the containerPart's committed value. That must\n * be done by callers.\n *\n * @param containerPart Part within which to add the new ChildPart\n * @param refPart Part before which to add the new ChildPart; when omitted the\n *     part added to the end of the `containerPart`\n * @param part Part to insert, or undefined to create a new part\n */\nexport const insertPart = (\n  containerPart: ChildPart,\n  refPart?: ChildPart,\n  part?: ChildPart\n): ChildPart => {\n  const container = wrap(containerPart._$startNode).parentNode!;\n\n  const refNode =\n    refPart === undefined ? containerPart._$endNode : refPart._$startNode;\n\n  if (part === undefined) {\n    const startNode = wrap(container).insertBefore(createMarker(), refNode);\n    const endNode = wrap(container).insertBefore(createMarker(), refNode);\n    part = new ChildPart(\n      startNode,\n      endNode,\n      containerPart,\n      containerPart.options\n    );\n  } else {\n    const endNode = wrap(part._$endNode!).nextSibling;\n    const oldParent = part._$parent;\n    const parentChanged = oldParent !== containerPart;\n    if (parentChanged) {\n      part._$reparentDisconnectables?.(containerPart);\n      // Note that although `_$reparentDisconnectables` updates the part's\n      // `_$parent` reference after unlinking from its current parent, that\n      // method only exists if Disconnectables are present, so we need to\n      // unconditionally set it here\n      part._$parent = containerPart;\n      // Since the _$isConnected getter is somewhat costly, only\n      // read it once we know the subtree has directives that need\n      // to be notified\n      let newConnectionState;\n      if (\n        part._$notifyConnectionChanged !== undefined &&\n        (newConnectionState = containerPart._$isConnected) !==\n          oldParent!._$isConnected\n      ) {\n        part._$notifyConnectionChanged(newConnectionState);\n      }\n    }\n    if (endNode !== refNode || parentChanged) {\n      let start: Node | null = part._$startNode;\n      while (start !== endNode) {\n        const n: Node | null = wrap(start!).nextSibling;\n        wrap(container).insertBefore(start!, refNode);\n        start = n;\n      }\n    }\n  }\n\n  return part;\n};\n\n/**\n * Sets the value of a Part.\n *\n * Note that this should only be used to set/update the value of user-created\n * parts (i.e. those created using `insertPart`); it should not be used\n * by directives to set the value of the directive's container part. Directives\n * should return a value from `update`/`render` to update their part state.\n *\n * For directives that require setting their part value asynchronously, they\n * should extend `AsyncDirective` and call `this.setValue()`.\n *\n * @param part Part to set\n * @param value Value to set\n * @param index For `AttributePart`s, the index to set\n * @param directiveParent Used internally; should not be set by user\n */\nexport const setChildPartValue = <T extends ChildPart>(\n  part: T,\n  value: unknown,\n  directiveParent: DirectiveParent = part\n): T => {\n  part._$setValue(value, directiveParent);\n  return part;\n};\n\n// A sentinel value that can never appear as a part value except when set by\n// live(). Used to force a dirty-check to fail and cause a re-render.\nconst RESET_VALUE = {};\n\n/**\n * Sets the committed value of a ChildPart directly without triggering the\n * commit stage of the part.\n *\n * This is useful in cases where a directive needs to update the part such\n * that the next update detects a value change or not. When value is omitted,\n * the next update will be guaranteed to be detected as a change.\n *\n * @param part\n * @param value\n */\nexport const setCommittedValue = (part: Part, value: unknown = RESET_VALUE) =>\n  (part._$committedValue = value);\n\n/**\n * Returns the committed value of a ChildPart.\n *\n * The committed value is used for change detection and efficient updates of\n * the part. It can differ from the value set by the template or directive in\n * cases where the template value is transformed before being committed.\n *\n * - `TemplateResult`s are committed as a `TemplateInstance`\n * - Iterables are committed as `Array<ChildPart>`\n * - All other types are committed as the template value or value returned or\n *   set by a directive.\n *\n * @param part\n */\nexport const getCommittedValue = (part: ChildPart) => part._$committedValue;\n\n/**\n * Removes a ChildPart from the DOM, including any of its content and markers.\n *\n * Note: The only difference between this and clearPart() is that this also\n * removes the part's start node. This means that the ChildPart must own its\n * start node, ie it must be a marker node specifically for this part and not an\n * anchor from surrounding content.\n *\n * @param part The Part to remove\n */\nexport const removePart = (part: ChildPart) => {\n  part._$clear();\n  part._$startNode.remove();\n};\n\nexport const clearPart = (part: ChildPart) => {\n  part._$clear();\n};\n", "import { __export } from './chunk-CEH6MNVV.mjs';\nimport { global } from '@storybook/global';\nimport { render as render$1 } from 'lit';\nimport { isTemplateResult } from 'lit/directive-helpers.js';\nimport { simulatePageLoad, simulateDOMContentLoaded } from 'storybook/preview-api';\nimport { dedent } from 'ts-dedent';\n\nvar entry_preview_exports={};__export(entry_preview_exports,{parameters:()=>parameters,render:()=>render,renderToCanvas:()=>renderToCanvas});var {Node}=global,render=(args,context)=>{let{id,component}=context;if(!component)throw new Error(`Unable to render story ${id} as the component annotation is missing from the default export`);let element=document.createElement(component);return Object.entries(args).forEach(([key,val])=>{element[key]=val;}),element};function renderToCanvas({storyFn,kind,name,showMain,showError,forceRemount},canvasElement){let element=storyFn();if(showMain(),isTemplateResult(element)){(forceRemount||!canvasElement.querySelector('[id=\"root-inner\"]'))&&(canvasElement.innerHTML='<div id=\"root-inner\"></div>');let renderTo=canvasElement.querySelector('[id=\"root-inner\"]');render$1(element,renderTo),simulatePageLoad(canvasElement);}else if(typeof element==\"string\")canvasElement.innerHTML=element,simulatePageLoad(canvasElement);else if(element instanceof Node){if(canvasElement.firstChild===element&&!forceRemount)return;canvasElement.innerHTML=\"\",canvasElement.appendChild(element),simulateDOMContentLoaded();}else showError({title:`Expecting an HTML snippet or DOM node from the story: \"${name}\" of \"${kind}\".`,description:dedent`\n        Did you forget to return the HTML snippet from the story?\n        Use \"() => <your snippet or node>\" or when defining the story.\n      `});}var parameters={renderer:\"web-components\"};\n\nexport { entry_preview_exports, parameters, render, renderToCanvas };\n", "import { entry_preview_exports } from './chunk-J73AUUXV.mjs';\nimport { global } from '@storybook/global';\nimport { setDefaultProjectAnnotations, setProjectAnnotations as setProjectAnnotations$1 } from 'storybook/preview-api';\n\nvar{window:globalWindow}=global;globalWindow.STORYBOOK_ENV=\"web-components\";function isValidComponent(tagName){if(!tagName)return !1;if(typeof tagName==\"string\")return !0;throw new Error('Provided component needs to be a string. e.g. component: \"my-element\"')}function isValidMetaData(customElements){if(!customElements)return !1;if(customElements.tags&&Array.isArray(customElements.tags)||customElements.modules&&Array.isArray(customElements.modules))return !0;throw new Error(`You need to setup valid meta data in your config.js via setCustomElements().\n    See the readme of addon-docs for web components for more details.`)}function setCustomElements(customElements){global.__STORYBOOK_CUSTOM_ELEMENTS__=customElements;}function setCustomElementsManifest(customElements){global.__STORYBOOK_CUSTOM_ELEMENTS_MANIFEST__=customElements;}function getCustomElements(){return global.__STORYBOOK_CUSTOM_ELEMENTS__||global.__STORYBOOK_CUSTOM_ELEMENTS_MANIFEST__}function setProjectAnnotations(projectAnnotations){return setDefaultProjectAnnotations(entry_preview_exports),setProjectAnnotations$1(projectAnnotations)}var{window,EventSource}=global;typeof module<\"u\"&&module?.hot?.decline&&(module.hot.decline(),new EventSource(\"__webpack_hmr\").addEventListener(\"message\",function(event){try{let{action}=JSON.parse(event.data);action===\"built\"&&window.location.reload();}catch{}}));\n\nexport { getCustomElements, isValidComponent, isValidMetaData, setCustomElements, setCustomElementsManifest, setProjectAnnotations };\n"],
  "mappings": "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",
  "names": ["render", "window"]
}
